<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Container 管理 (筆記 一) - Monolithic to Microservice</title>
      <link href="2020/10/09/Container%20%E7%AE%A1%E7%90%86%20(%E4%B8%80)%20-%20Monolithic%20to%20Microservice/"/>
      <url>2020/10/09/Container%20%E7%AE%A1%E7%90%86%20(%E4%B8%80)%20-%20Monolithic%20to%20Microservice/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在玩轉 Kubernetes 這個炫砲的技術之前，我們必須要先瞭解它到底在解決什麼樣的問題以及整個來龍去脈。該文章主要先探討 Monlithic 作為歷史背景下常用的開發模式，一直到使用 Microservice 時遇到的處境以及相對應工具的搭配，來呈現在應用程式微服務化的情境底下如何管理大量的微服務。</p><h3 id="Monolithic-的缺點"><a href="#Monolithic-的缺點" class="headerlink" title="Monolithic 的缺點"></a>Monolithic 的缺點</h3><ol><li>隨時間而變肥大且複雜，軟體難以重構。在除錯時也難以尋找。</li><li>不能依據不同服務的流量需求來 <strong>水平擴展</strong> ，而是一次部署整體支應用程式造成不必要的資源成本增加。</li></ol><h3 id="Microservice-的優點"><a href="#Microservice-的優點" class="headerlink" title="Microservice 的優點"></a>Microservice 的優點</h3><ol><li>開發上的可以做到良好的<strong>解隅 (Decouple)</strong></li><li>擁有水平擴展的能力 (依然需要看情境)</li><li>不同的微服務可以獨立維護部署</li></ol><p><img src="https://i.imgur.com/enSwKWw.png"><br><img src="https://i.imgur.com/fSUyZRB.png"></p><h2 id="困難點"><a href="#困難點" class="headerlink" title="困難點"></a>困難點</h2><ul><li><p>😂 重新抽象軟體架構</p></li><li><p>😂 <strong>API 要變成 stateless</strong> (*註解ㄧ)</p></li><li><p>😍 由於系統變得龐大且複雜，所以在除錯上會更加困難 <a href="https://zipkin.io/">Zipkin</a></p></li><li><p>😍😎 當有大量的微服務 <strong>相互依賴</strong> 時會讓你要去決定誰去要一起被部署</p></li><li><p>😎 微服務造成環境的多樣性更高，在開發和部署環境上更不容易維護</p></li><li><p>😎 環境需求的不同，程式想要不同版本的 shared libs</p></li></ul><p>註解一：</p><ol><li>當你的服務不需要在內部維持請求之間的狀態時就是 <strong>stateless service</strong> ，反之就是 <strong>stateful service</strong> (<strong>需要開 sticky session</strong>)。</li><li>微服務應該將狀態資訊儲存在外部而非內部，這才有利於服務的擴展。</li></ol><p><a href="https://stackoverflow.com/questions/58696684/stateless-vs-stateful-microservices">stateful vs stateless</a></p><h2 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h2><ul><li><p>😂 依賴軟體團隊的經驗設計</p></li><li><p>😍 服務的<a href="https://www.fiorano.com/blogs/microservices">顆粒度(Granularity)</a>應該以獨立的業務邏輯來解決之間因 <strong>相互依賴</strong> 導致 <strong>除錯困難</strong> 的問題</p></li><li><p>😎 <strong>We ease the pain with the help of docker and kubernetes.</strong></p></li></ul><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p><strong>因應大量容器部署管理的困難，所以才需要有一個容器管理工具來解決</strong> (e.g. 某公司測試用 8000 個 container)</p><h2 id="Container-management-solutions"><a href="#Container-management-solutions" class="headerlink" title="Container management solutions"></a>Container management solutions</h2><ul><li><strong>docker-compose</strong> <ul><li>適用在 <strong>單節點</strong> 的環境上，可以快速部署多個容器。</li></ul></li><li><strong>openshift</strong> <ul><li><strong>now base on kubernetes</strong></li><li>red hat cloud 較不有名</li><li><img src="https://i.imgur.com/JegIerL.png" width="450" height="450" /></li></ul></li><li><strong>kubernetes</strong><ul><li>在 public cloud 得到最完整的支援</li><li>儼然成為 Container management 的標準 </li></ul></li><li><strong>minikube</strong><ul><li>local 的單節點 k8s。<strong>適合拿來練習</strong></li></ul></li><li><strong>k3s</strong> (閹割)<ul><li>沒有 add-ons ，不夠彈性</li></ul></li><li><strong>microk8s</strong><ul><li>有 add-ons ，可彈性抽換不同 component</li></ul></li></ul><h2 id="What’s-the-Kubernetes"><a href="#What’s-the-Kubernetes" class="headerlink" title="What’s the Kubernetes?"></a>What’s the Kubernetes?</h2><h3 id="歷史"><a href="#歷史" class="headerlink" title="歷史"></a>歷史</h3><ol><li>Kubernetes（又稱為 k8s）是一個開放原始碼的 <strong>容器編排管理系統 container orchestrator</strong>，用於自動化應用程序的部署，擴展和管理。</li><li>Google 於 2014 年中首次宣布 Kubernetes ，現由 <a href="https://www.cncf.io/">Cloud Native Computing Foundation (CNCF)</a> 負責維護。</li><li>原以 C++ 編寫，後以 Golang 重構。</li><li>發音 koo ～ ber ～ natis，又稱作 <strong>k8s</strong>。</li></ol><h3 id="叢集架構"><a href="#叢集架構" class="headerlink" title="叢集架構"></a>叢集架構</h3><p><img src="https://i.imgur.com/g8e8Gft.png"></p><ol><li><strong>Pod</strong> 最基本的部署單位。</li><li><strong>Service</strong> 代表一組功能相同的 Pods 群體。訪問 Service 時會自動 load balance 到該群體底下任意的 Pod 上。</li><li><strong>Label</strong> 可以將任意物件 <strong>貼上標籤</strong> ，方便將物件進行分組還有分配任務</li><li><strong>Ingress</strong> 用於管理從外部對叢集中的 <strong>Service</strong> 進行訪問（HTTP, HTTPS）。必須部署到 master node 上面。</li></ol><h3 id="系統元件"><a href="#系統元件" class="headerlink" title="系統元件"></a>系統元件</h3><!-- > FIXME: ingress service 在哪兒？ --><p><img src="https://i.imgur.com/zpnOfVC.png"></p><ul><li><strong>master node</strong> : 負責管理和控制所有 <strong>worker node</strong> 的主機。</li><li><strong>Worker node</strong> : 運行微服務的主機。</li><li><strong>API server</strong> : 提供 Kubernetes API ，讓使用者可以透過它管理和設定整個系統。</li><li><strong>etcd</strong> : 儲存整個 k8s 叢集中物件的規格。</li><li><strong>Scheduler</strong> : 負責決定 Pod 要部署到哪一個節點上。</li><li><strong>Kubelets</strong> : <strong>視為每個節點的大腦</strong>。<ul><li> 作為 master node 和 worker node 溝通的媒介。</li><li>負責管理 Pod，包括在 Pod 發生故障時創建新的 Pod。</li></ul></li><li><strong>cAdvisor</strong> : 搜集該節點上所有資源的資訊，透過 kubelet 隨時回報給 master node。</li><li><strong>Kube-Proxy</strong> : 維護節點上的網絡規則。負責網路流量的傳送。</li></ul><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li><p><strong>Velocity 速度</strong></p><ul><li>可達成短時間多次的不停機更新。</li><li><img src="https://i.imgur.com/v6vg4AW.jpg" width="550" height="325" /></br></li></ul></li><li><p><strong>Immutability 不變性</strong></p><ul><li>當軟體版本更新時<ul><li>✅ (<strong>immutable</strong>) 重新 <strong>build</strong> 一個更新的 <strong>image</strong> </li><li>❌ (<strong>mutable</strong>) 進入 <strong>container</strong> 更新 </li></ul></li></ul></li><li><p><strong>Declarative configuration 宣告式設定</strong></p><ul><li><strong>命令式命令 (imperative commands)</strong> 定義了 <strong>行為</strong> 。「執行Ａ，執行Ｂ，然後再執行Ｃ…」</li><li><strong>宣告式設定 (declarartive configurations)</strong> 定義了 <strong>狀態</strong> 。「我需要三個Ａ程式」</li></ul></li><li><p><strong>Self-healing 自我修復</strong></p><ul><li>隨時維護當前所需的狀態設定。</li></ul></li><li><p><strong>Scalability 擴展性</strong></p><ul><li>通過新增或刪除 Pod 輕鬆地上下擴展服務的工作負載。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Microservice </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Flutter 在 iOS 和 Android  上設定 GoogleMap</title>
      <link href="2020/07/09/%E4%BD%BF%E7%94%A8-Flutter-%E5%9C%A8-iOS-%E5%92%8C-Android-%E4%B8%8A%E8%A8%AD%E5%AE%9A-GoogleMap/"/>
      <url>2020/07/09/%E4%BD%BF%E7%94%A8-Flutter-%E5%9C%A8-iOS-%E5%92%8C-Android-%E4%B8%8A%E8%A8%AD%E5%AE%9A-GoogleMap/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果要在 iOS 或是 Android 中使用 Google 所提供的地圖或道路資訊等等，就必須要取得 Google 配給你的 <strong><code>API key</code></strong> ，而它是用來在每次請求 Google 地圖時讓 Google 可以辨認帳戶的金鑰。所以請妥善保管你的金鑰並且由於安全的緣故不要在同一個金鑰上面開起太多功能！</p><span id="more"></span><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>所有 Google 的服務都會經過手機內的 <strong>Google Play Services</strong> 來傳輸資料。我們可以從下圖得知應用程式是只要使用到 Google 的服務都會透過 <strong><a href="https://en.wikipedia.org/wiki/Inter-process_communication">IPC</a></strong> 與 Google Play Services 做溝通的（認證、取得資訊…）</p><p><img src="https://i.imgur.com/3yZCj4y.png"></p><p>因此記得在 <strong>Android studio</strong> 中安裝 <strong>Google Play services</strong> 不然是無法取得地圖的任何資訊喔！！！</p><p><img src="https://i.imgur.com/shqRqoM.png"></p><h2 id="Android-環境設置"><a href="#Android-環境設置" class="headerlink" title="Android 環境設置"></a>Android 環境設置</h2><p>設定 <code>google map</code> 的 <strong><code>API key</code></strong> 在 <code>AndroidManifest.xml</code> 檔案中</p><p>在該路徑底下 android/app/src/main/AndroidManifest.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span></span></span><br><span class="line">  &lt;application ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;com.google.android.geo.API_KEY&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:value</span>=<span class="string">&quot;YOUR KEY HERE&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="iOS-環境設置"><a href="#iOS-環境設置" class="headerlink" title="iOS 環境設置"></a>iOS 環境設置</h2><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>在 cmd 建立 Flutter 專案時把預設 iOS 開發語言設定成 swift</p><blockquote><p>flutter create -i swift &lt;專案名字&gt;</p></blockquote><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>設定 <code>google map</code> 的 <strong><code>API key</code></strong> 在 <code>Appdelegate.swift</code> 檔案中</p><p>在該路徑底下 ios/Runner/AppDelegate.swift</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> Flutter</span><br><span class="line"><span class="keyword">import</span> GoogleMaps</span><br><span class="line"></span><br><span class="line"><span class="keyword">@UIApplicationMain</span></span><br><span class="line"><span class="keyword">@objc</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">FlutterAppDelegate</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">application</span>(</span></span><br><span class="line"><span class="function">    <span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>,</span></span><br><span class="line"><span class="function">    <span class="params">didFinishLaunchingWithOptions</span> <span class="params">launchOptions</span>: [<span class="params">UIApplicationLaunchOptionsKey</span>: <span class="keyword">Any</span>]<span class="operator">?</span></span></span><br><span class="line"><span class="function">  )</span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="type">GMSServices</span>.provideAPIKey(<span class="string">&quot;YOUR KEY HERE&quot;</span>)</span><br><span class="line">    <span class="type">GeneratedPluginRegistrant</span>.register(with: <span class="keyword">self</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.application(application, didFinishLaunchingWithOptions: launchOptions)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>確保 iOS 裝置可以支援地圖渲染還需要加入以下設定在該檔案中</p><p>在該路徑底下ios/Runner/Info.plist</p><figure class="highlight plist"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>io.flutter.embedded_views_preview<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="完成！！！"><a href="#完成！！！" class="headerlink" title="完成！！！"></a>完成！！！</h3>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> iOS </tag>
            
            <tag> Google Map </tag>
            
            <tag> Google Play services </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推播通知 Push Notification - 改變手機應用的技術</title>
      <link href="2020/03/11/%E6%8E%A8%E6%92%AD%E9%80%9A%E7%9F%A5-Push-Notification-%E6%94%B9%E8%AE%8A%E6%89%8B%E6%A9%9F%E6%87%89%E7%94%A8%E7%9A%84%E6%8A%80%E8%A1%93/"/>
      <url>2020/03/11/%E6%8E%A8%E6%92%AD%E9%80%9A%E7%9F%A5-Push-Notification-%E6%94%B9%E8%AE%8A%E6%89%8B%E6%A9%9F%E6%87%89%E7%94%A8%E7%9A%84%E6%8A%80%E8%A1%93/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>相信許多人起床的第一件事就是滑滑手機的通知，看一下有沒有新的 email 或訊息，甚至是購物平台的特價活動等等。最後再決定要不要打開那個應用程式或是一鍵清除。<em>所以如果這項技術不在我們的生活中，那我們的手機將會比宇宙還要安靜。</em> 透過伺服器主動發送訊息到客戶的手機，讓使用者可以及時地獲得各項服務的訊息通知。</p><span id="more"></span><h1 id="Firebase-Cloud-Messaging-介紹"><a href="#Firebase-Cloud-Messaging-介紹" class="headerlink" title="Firebase Cloud Messaging 介紹"></a>Firebase Cloud Messaging 介紹</h1><p><a href="https://firebase.google.com/docs/cloud-messaging/?gclid=CjwKCAjwmKLzBRBeEiwACCVihrLVkZCYLgGgoSq-qo4hRZP9u13ClyFbMIjpWQB234ZVU5W8YMjpmBoCOOQQAvD_BwE">Firebase Cloud Messaging</a> 簡稱 FCM ，它是一種跨平台的消息傳遞解決方案，可以讓服務免費的發送消息。當然數量也會有一定的限制。所以今天就是要使用 Node.js 來實作 FCM 發送消息的服務。</p><h1 id="在-Node-js-中配置-FCM"><a href="#在-Node-js-中配置-FCM" class="headerlink" title="在 Node.js 中配置 FCM"></a>在 Node.js 中配置 FCM</h1><h4 id="Step-1-安裝套件"><a href="#Step-1-安裝套件" class="headerlink" title="Step 1 安裝套件"></a>Step 1 安裝套件</h4><blockquote><p>npm install firebase-admin –save</p></blockquote><h4 id="Step-2-在專案中引入該套件"><a href="#Step-2-在專案中引入該套件" class="headerlink" title="Step 2 在專案中引入該套件"></a>Step 2 在專案中引入該套件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> admin = <span class="built_in">require</span>(<span class="string">&#x27;firebase-admin&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="Step-3-向-FCM-認證"><a href="#Step-3-向-FCM-認證" class="headerlink" title="Step 3 向 FCM 認證"></a>Step 3 向 FCM 認證</h4><p>將我們的 FCM 的 <a href="https://console.firebase.google.com/u/0/?pli=1">service account</a> 與我們的伺服器作認證連結</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin.initializeApp(&#123;</span><br><span class="line">  credential: admin.credential.applicationDefault(),</span><br><span class="line">  databaseURL: <span class="string">&#x27;https://&lt;DATABASE_NAME&gt;.firebaseio.com&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="傳送推播通知"><a href="#傳送推播通知" class="headerlink" title="傳送推播通知"></a>傳送推播通知</h1><p><img src="https://i.imgur.com/g7f4LIz.png"></p><p>經過以上的步驟我們的 Node.js 基本上就可以開始推播訊息給我們的用戶，但在這之前請確保手機的 App 已經設置好相關的 FCM sdk ，並將該用戶的 FCM token 傳送到後端並加以儲存。這是為了讓我們伺服器服務知道要推播通知給哪名使用者。</p><h3 id="對單一特定的手機裝置傳送-messages"><a href="#對單一特定的手機裝置傳送-messages" class="headerlink" title="對單一特定的手機裝置傳送 messages"></a>對單一特定的手機裝置傳送 messages</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 這個註冊的 token 是從手機端的 FCM SDKs 傳來的.</span></span><br><span class="line"><span class="keyword">var</span> registrationToken = <span class="string">&#x27;YOUR_REGISTRATION_TOKEN&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> message = &#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    score: <span class="string">&#x27;850&#x27;</span>,</span><br><span class="line">    time: <span class="string">&#x27;2:45&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  token: registrationToken</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 對這個已註冊 token 的手機裝置傳送訊息</span></span><br><span class="line">admin.messaging().send(message)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Response 是一個字串型別的 message ID.</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Successfully sent message:&#x27;</span>, response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Error sending message:&#x27;</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="對多個手機裝置傳送-messages"><a href="#對多個手機裝置傳送-messages" class="headerlink" title="對多個手機裝置傳送 messages"></a>對多個手機裝置傳送 messages</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以建立包含多達 100 個已註冊 token 的陣列(串列).</span></span><br><span class="line"><span class="comment">// 這些已註冊的 tokens 手機端的 FCM SDKs.</span></span><br><span class="line"><span class="keyword">const</span> registrationTokens = [</span><br><span class="line">  <span class="string">&#x27;YOUR_REGISTRATION_TOKEN_1&#x27;</span>,</span><br><span class="line">  <span class="comment">// …</span></span><br><span class="line">  <span class="string">&#x27;YOUR_REGISTRATION_TOKEN_N&#x27;</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> message = &#123;</span><br><span class="line">  data: &#123;<span class="attr">score</span>: <span class="string">&#x27;850&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;2:45&#x27;</span>&#125;,</span><br><span class="line">  tokens: registrationTokens,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">admin.messaging().sendMulticast(message)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;response.successCount&#125;</span> messages were sent successfully`</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="對已訂閱特定主題-topics-的手機裝置傳送-messages"><a href="#對已訂閱特定主題-topics-的手機裝置傳送-messages" class="headerlink" title="對已訂閱特定主題 topics 的手機裝置傳送 messages"></a>對已訂閱特定主題 topics 的手機裝置傳送 messages</h3><p>在建立一個 <code>topic</code> 後，不是透過在手機裝置上訂閱該 <code>topic</code> 就是透過 <a href="https://firebase.google.com/docs/cloud-messaging/manage-topics?authuser=3">server API</a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以在 topic 名字前面選擇性地加上 &quot;/topics/&quot;.</span></span><br><span class="line"><span class="keyword">var</span> topic = <span class="string">&#x27;highScores&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> message = &#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    score: <span class="string">&#x27;850&#x27;</span>,</span><br><span class="line">    time: <span class="string">&#x27;2:45&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  topic: topic</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向已經訂閱該 topic 的手機裝置傳送訊息.</span></span><br><span class="line">admin.messaging().send(message)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Response 是一個字串型別的 message ID.</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Successfully sent message:&#x27;</span>, response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Error sending message:&#x27;</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>當然也有 <strong>條件主題</strong> 的功能，請查閱 <a href="https://firebase.google.com/docs/cloud-messaging/send-message?authuser=3#send_messages_to_topics">API</a></p><h3 id="批次傳送-messages"><a href="#批次傳送-messages" class="headerlink" title="批次傳送 messages"></a>批次傳送 messages</h3><p>可以將<strong>最多 100 條訊</strong>息組合在一起，然後在 <code>API</code> 呼叫中將他們一次送出去，與每次都為一條訊息發送 HTTP request 的效能上有顯著的提升. <code>e.g.</code> 當你需要同時傳送訊息到不同使用者上，而你主體的訊息內容只有些微的差異。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建立一個最多包涵 100 條訊息的陣列(串列)。</span></span><br><span class="line"><span class="keyword">const</span> messages = [];</span><br><span class="line">messages.push(&#123;</span><br><span class="line">  notification: &#123;<span class="attr">title</span>: <span class="string">&#x27;Price drop&#x27;</span>, <span class="attr">body</span>: <span class="string">&#x27;5% off all electronics&#x27;</span>&#125;,</span><br><span class="line">  token: registrationToken,</span><br><span class="line">&#125;);</span><br><span class="line">messages.push(&#123;</span><br><span class="line">  notification: &#123;<span class="attr">title</span>: <span class="string">&#x27;Price drop&#x27;</span>, <span class="attr">body</span>: <span class="string">&#x27;2% off all books&#x27;</span>&#125;,</span><br><span class="line">  topic: <span class="string">&#x27;readers-club&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">admin.messaging().sendAll(messages)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.successCount + <span class="string">&#x27; messages were sent successfully&#x27;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Firebase Cloud Messaging </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
